--begin, commit, rollback

begin;

declare s1 cursor for select * from employees;

fetch backward all from s1

commit

/*
NEXT 
PRIOR
FIRST 
LAST
ABSOLUTE count
RELATIVE count
ALL
FORWARD
FORWARD count
FORWARD ALL
BACKWARD
BACKWARD count
BACKWARD ALL
*/

--function
create or replace function get_profile(years integer)
    returns text as $$
declare
    profile text default'';
    rec_emp record;
    cur_emp cursor(years integer)
        for select first_name, last_name, salary, hire_date
        from employees where extract(year from age(now(),hire_date)) = years;
begin
    open cur_emp(years);
    loop
        fetch cur_emp into rec_emp;
        exit when not found;

        profile := profile || ', ' || concat(rec_emp.first_name ,' ',rec_emp.last_name) || ' : ' || rec_emp.salary;
        end loop;
        close cur_emp;
        return profile;
end;$$
language plpgsql;

select get_profile(1)

--contoh kedua
create or replace function get_profile(years integer)
    returns table(
        names varchar,
        salarys money
    ) as $$
declare
    rec_emp record;
    cur_emp cursor(years integer)
        for select first_name, last_name, salary, hire_date
        from employees where extract(year from age(now(),hire_date)) = years;
begin
    open cur_emp(years);
    loop
        fetch cur_emp into rec_emp;
        exit when not found;

        names := concat(rec_emp.first_name ,' ',rec_emp.last_name);
        salarys := rec_emp.salary;
        return next;
        end loop;
        close cur_emp;
end;$$
language plpgsql;

select get_profile(19)

--contoh ketiga
create or replace function get_profile(years integer)
    returns table(
        names varchar,
        salarys money
    ) as $$
declare
    rec_emp record;
begin
        for rec_emp in select * 
        from employees where extract(year from age(now(),hire_date)) = years
    loop
        names := concat(rec_emp.first_name ,' ',rec_emp.last_name);
        salarys := rec_emp.salary;
        return next;
        end loop;
end;$$
language plpgsql;

select get_profile(19)

--contoh function keempat
create or replace function insert_region_countries(regname varchar, countryid char, countryname varchar)
    returns void as $$
begin
        insert into regions (region_name) values (regname);
        perform(select setval('"regions_region_id_seq"',(select max(region_id)from regions)));
        insert into countries (country_id, country_name, region_id)
        values (countryid, countryname, currval('"regions_region_id_seq"'));
    end;$$
language plpgsql;

select insert_region_countries('Arab','DP','Depok')
select * from countries

--contoh function kelima
create or replace function edit_countries (regionid int, countryid char)
	returns void as $$
begin 
	update countries set region_id = region_id where country_id = countryid;
end;$$
language plpgsql;


--contoh function ke6
create or replace function delete_countries (country_id char)
    returns void as $$
begin
        delete from countries where country_id = countryid;
end;$$
language plpgsql;

--contoh function ke7
create or replace function insert_regcount(regionname varchar, countryid char, countryname varchar)
    returns void as $$
declare
    rec_data record;
begin

    select region_name from regions where region_name = regionname into rec_data;
    perform(select setval('regions_region_id_seq',(select max(region_id) from regions)));
    if rec_data.region_name = regionname
    then null;
    else 
        insert into regions(region_name) values (regionname);
    end if;

    select country_id from countries where country_id = countryid into rec_data;
    if rec_data.country_id = countryid
    then null;
    else 
        insert into countries (country_id, country_name, region_id)
        values (countryid, countryname, currval('regions_region_id_seq'));
        end if;
		
    end;$$
language plpgsql;


--contoh procedure
create or replace procedure insert_data (
    regionname varchar,
    countryid varchar,
    countryname varchar
)
language plpgsql
as $$

declare
    rec_data record;
begin
    
    select region_name from regions where region_name = regionname into rec_data;
    perform(select setval('regions_region_id_seq',(select max(region_id) from regions)));
    if rec_data.region_name = regionname
    then null;
    else 
        insert into regions(region_name) values (regionname);
    end if;

    select country_id from countries where country_id = countryid into rec_data;
    if rec_data.country_id = countryid
    then null;
    else 
        insert into countries (country_id, country_name, region_id)
        values (countryid, countryname, currval('regions_region_id_seq'));
        end if;
    end;$$
	

